# Auth0 tenant domain
AUTH0_DOMAIN=mytenant.auth0.com
# ID and secret for an app authorized to use the management API
AUTH0_MANAGEMENT_ID=management-app-id
AUTH0_MANAGEMENT_SECRET=management-secret
AUTH0_AUDIENCE=https://audience.com/api
# Issuer for Auth0 tokens. Note that when you use a custom domain
#  for login, the issuer will be the custom domain, but the
#  audience will still be Auth0 tenant domain
AUTH0_ISSUER=https://customdomain.org/
# JWT secret key: used to provide some protection around registration
# Generate with: python -c "import secrets; print(secrets.token_urlsafe(32))"
JWT_SECRET_KEY=secret-key
# Note the list syntax pydantic-settings uses
ADMIN_ROLES='["Admin", "GalaxyAdmin"]'
# Enable sending emails (for approving group memberships etc.)
SEND_EMAIL=False
# AAI Portal URL for admin links in emails
AAI_PORTAL_URL=https://aaiportal.example.com
# Allowed email domains for SBP registration
SBP_ALLOWED_EMAIL_DOMAINS='["unsw.edu.au", "biocommons.org.au", "sydney.edu.au", "wehi.edu.au", "monash.edu", "griffith.edu.au", "unimelb.edu.au"]'
# URL of Galaxy instance, for making calls to Galaxy API
GALAXY_URL=https://galaxy.example.com
GALAXY_API_KEY=api-key
# Comma-separated list of allowed origins. Note we
#   don't process this with pydantic-settings as it needs
#   to be used before the FastAPI app loads
CORS_ALLOWED_ORIGINS=http://localhost:8000
# Database config: we do this differently for local dev vs. on AWS
# NOTE: DB_HOST is used first if present, so don't include it
# if you want a local DB
# Local dev: supply the full DB connection string as DB_URL
DB_URL=sqlite:///mydatabase.db
# AWS: supply DB_HOST, with the host name and port
# DB_HOST=mydb.amazonaws.com:5432
# AWS SES configs - required if testing email functionality locally. Ask amanda@biocommons.org.au for credentials values
# AWS_ACCESS_KEY_ID=<aws-access-key-id>
# AWS_SECRET_ACCESS_KEY=<aws-secret-access-key>
