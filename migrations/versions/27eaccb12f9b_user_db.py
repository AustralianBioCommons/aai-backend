"""user_db

Revision ID: 27eaccb12f9b
Revises:
Create Date: 2025-08-11 11:06:27.410962

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '27eaccb12f9b'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('auth0role',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_auth0role')),
    sa.UniqueConstraint('id', name=op.f('uq_auth0role_id'))
    )
    op.create_table('biocommons_user',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_biocommons_user')),
    sa.UniqueConstraint('email', name=op.f('uq_biocommons_user_email')),
    sa.UniqueConstraint('username', name=op.f('uq_biocommons_user_username'))
    )
    op.create_table('biocommonsgroup',
    sa.Column('group_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('group_id', name=op.f('pk_biocommonsgroup')),
    sa.UniqueConstraint('group_id', name=op.f('uq_biocommonsgroup_group_id')),
    sa.UniqueConstraint('name', name=op.f('uq_biocommonsgroup_name'))
    )
    op.create_table('groupmembership',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('group_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('approval_status', sa.Enum('APPROVED', 'PENDING', 'REVOKED', name='ApprovalStatusEnum'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('updated_by_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['biocommonsgroup.group_id'], name=op.f('fk_groupmembership_group_id_biocommonsgroup')),
    sa.ForeignKeyConstraint(['updated_by_id'], ['biocommons_user.id'], name=op.f('fk_groupmembership_updated_by_id_biocommons_user')),
    sa.ForeignKeyConstraint(['user_id'], ['biocommons_user.id'], name=op.f('fk_groupmembership_user_id_biocommons_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_groupmembership')),
    sa.UniqueConstraint('group_id', 'user_id', name='user_group_pairing')
    )
    op.create_table('groupmembershiphistory',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('group_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('approval_status', sa.Enum('APPROVED', 'PENDING', 'REVOKED', name='ApprovalStatusEnum'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('updated_by_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['biocommonsgroup.group_id'], name=op.f('fk_groupmembershiphistory_group_id_biocommonsgroup')),
    sa.ForeignKeyConstraint(['updated_by_id'], ['biocommons_user.id'], name=op.f('fk_groupmembershiphistory_updated_by_id_biocommons_user')),
    sa.ForeignKeyConstraint(['user_id'], ['biocommons_user.id'], name=op.f('fk_groupmembershiphistory_user_id_biocommons_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_groupmembershiphistory'))
    )
    op.create_table('grouprolelink',
    sa.Column('group_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('role_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['biocommonsgroup.group_id'], name=op.f('fk_grouprolelink_group_id_biocommonsgroup')),
    sa.ForeignKeyConstraint(['role_id'], ['auth0role.id'], name=op.f('fk_grouprolelink_role_id_auth0role')),
    sa.PrimaryKeyConstraint('group_id', 'role_id', name=op.f('pk_grouprolelink'))
    )
    op.create_table('platformmembership',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('platform_id', sa.Enum('GALAXY', 'BPA_DATA_PORTAL', name='PlatformEnum'), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('approval_status', sa.Enum('APPROVED', 'PENDING', 'REVOKED', name='ApprovalStatusEnum'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('updated_by_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['updated_by_id'], ['biocommons_user.id'], name=op.f('fk_platformmembership_updated_by_id_biocommons_user')),
    sa.ForeignKeyConstraint(['user_id'], ['biocommons_user.id'], name=op.f('fk_platformmembership_user_id_biocommons_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_platformmembership')),
    sa.UniqueConstraint('platform_id', 'user_id', name='platform_user_id_platform_id')
    )
    op.create_table('platformmembershiphistory',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('platform_id', sa.Enum('GALAXY', 'BPA_DATA_PORTAL', name='PlatformEnum'), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('approval_status', sa.Enum('APPROVED', 'PENDING', 'REVOKED', name='ApprovalStatusEnum'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('updated_by_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['updated_by_id'], ['biocommons_user.id'], name=op.f('fk_platformmembershiphistory_updated_by_id_biocommons_user')),
    sa.ForeignKeyConstraint(['user_id'], ['biocommons_user.id'], name=op.f('fk_platformmembershiphistory_user_id_biocommons_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_platformmembershiphistory'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('platformmembershiphistory')
    op.drop_table('platformmembership')
    op.drop_table('grouprolelink')
    op.drop_table('groupmembershiphistory')
    op.drop_table('groupmembership')
    op.drop_table('biocommonsgroup')
    op.drop_table('biocommons_user')
    op.drop_table('auth0role')
    # ### end Alembic commands ###
