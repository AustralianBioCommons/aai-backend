"""group_management

Revision ID: 4a316e432a93
Revises:
Create Date: 2025-07-22 11:47:01.262197

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '4a316e432a93'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('auth0role',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_auth0role')),
    sa.UniqueConstraint('id', name=op.f('uq_auth0role_id'))
    )
    op.create_table('biocommonsgroup',
    sa.Column('group_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('group_id', name=op.f('pk_biocommonsgroup')),
    sa.UniqueConstraint('group_id', name=op.f('uq_biocommonsgroup_group_id')),
    sa.UniqueConstraint('name', name=op.f('uq_biocommonsgroup_name'))
    )
    op.create_table('approvalhistory',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('group_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('approval_status', sa.Enum('APPROVED', 'PENDING', 'REVOKED', name='ApprovalStatusEnum'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('updated_by_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('updated_by_email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['biocommonsgroup.group_id'], name=op.f('fk_approvalhistory_group_id_biocommonsgroup')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_approvalhistory'))
    )
    op.create_table('groupmembership',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('group_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('approval_status', sa.Enum('APPROVED', 'PENDING', 'REVOKED', name='ApprovalStatusEnum'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('updated_by_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('updated_by_email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['biocommonsgroup.group_id'], name=op.f('fk_groupmembership_group_id_biocommonsgroup')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_groupmembership')),
    sa.UniqueConstraint('group_id', 'user_id', name='user_group_pairing')
    )
    op.create_table('grouprolelink',
    sa.Column('group_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('role_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['biocommonsgroup.group_id'], name=op.f('fk_grouprolelink_group_id_biocommonsgroup')),
    sa.ForeignKeyConstraint(['role_id'], ['auth0role.id'], name=op.f('fk_grouprolelink_role_id_auth0role')),
    sa.PrimaryKeyConstraint('group_id', 'role_id', name=op.f('pk_grouprolelink'))
    )
    # ### end Alembic commands ###
    # Manually added: alembic doesn't generate these automatically
    op.create_unique_constraint(op.f('uq_auth0role_id'), 'auth0role', ['id'])
    op.create_unique_constraint(op.f('uq_biocommonsgroup_group_id'), 'biocommonsgroup', ['group_id'])


def downgrade() -> None:
    op.drop_constraint(op.f('uq_biocommonsgroup_group_id'), 'biocommonsgroup', type_='unique')
    op.drop_constraint(op.f('uq_auth0role_id'), 'auth0role', type_='unique')
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('grouprolelink')
    op.drop_table('groupmembership')
    op.drop_table('approvalhistory')
    op.drop_table('biocommonsgroup')
    op.drop_table('auth0role')
    # ### end Alembic commands ###
